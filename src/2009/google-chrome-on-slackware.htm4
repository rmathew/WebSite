m4_define(`m4_post_date', `2009-11-23')m4_dnl
m4_define(`m4_post_title', `Google Chrome on Slackware')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
<a href="http://www.google.com/chrome">Google Chrome</a> has been out for a while now, but only on Windows. There are pre-release <a href="http://dev.chromium.org/getting-involved/dev-channel">Linux builds of Chrome</a>, but they work out-of-the-box only on <a href="http://www.ubuntu.com/">Ubuntu</a> or <a href="http://www.debian.com/">Debian</a>. As a <a href="http://www.slackware.com/">Slackware</a> 12.1 user, I couldn't therefore check out this browser and I was too lazy to <a href="http://code.google.com/p/chromium/wiki/LinuxBuildInstructions">build</a> it myself. Fortunately for me, it turns out that the available builds can be made to work on Slackware with a little effort. Chrome turns out to be surprisingly usable and fast on Linux. That said, I'm not shifting from <a href="http://www.mozilla.com/firefox/">Firefox</a> to Chrome yet, at least not right away.
m4_begin_post_rest
<p>
The Chrome for Linux package from Google is currently available as a Debian package (a "<tt>.deb</tt>" file). You can extract the contents of this file using the standard <tt>ar</tt> (not <tt>tar</tt>) utility. One of the extracted files will be <tt>data.tar.lzma</tt> - you can decompress this file using the <a href="http://p7zip.sourceforge.net/">p7zip</a> utility to get <tt>data.tar</tt>. Use <tt>tar</tt> to expand <tt>data.tar</tt> - the essential Chrome files will be extracted into the sub-folder <tt>opt/google/chrome</tt>. Copy this folder to a location of your choice.
<p>
Ironically, some of the libraries needed by Chrome are provided by Firefox (the version I have is 3.5.5). To get started, I had to create the following symbolic links within the Chrome installation folder to libraries in my Firefox installation folder (<tt>/usr/local/firefox</tt>):<br /><pre>    libnspr4.so.0d -&gt; /usr/local/firefox/libnspr4.so<br />    libnss3.so.1d -&gt; /usr/local/firefox/libnss3.so<br />    libnssutil3.so.1d -&gt; /usr/local/firefox/libnssutil3.so<br />    libplc4.so.0d -&gt; /usr/local/firefox/libplc4.so<br />    libplds4.so.0d -&gt; /usr/local/firefox/libplds4.so<br />    libsmime3.so.1d -&gt; /usr/local/firefox/libsmime3.so<br />    libssl3.so.1d -&gt; /usr/local/firefox/libssl3.so<br /></pre>The Firefox installation folder also needs to be known to the dynamic loader while running Chrome - the easiest way to achieve this is to add the path to this folder to the <tt>LD_LIBRARY_PATH</tt> environment variable set in the <tt>google-chrome</tt> wrapper script in the Chrome installation folder. (This part is important - without this you'd get crashes in the NSS library while running Chrome.)
<p>
The next thing I had to do to get Chrome working on this machine was to install <tt>gconf</tt> and <tt>ORBit</tt> from <a href="http://www.slacky.eu/">Slacky</a>, as these aren't installed with Slackware. Finally I had to update <a href="http://www.cairographics.org/">Cairo</a> along with <tt>pixman</tt> to the latest respectively stable releases.
<p>
I could finally run the <tt>google-chrome</tt> wrapper script from Chrome to start the browser and play around with it.
<p>
<div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_glrEiI4xsDc/Swl7rZwfF2I/AAAAAAAAA0E/95PzabxgC1E/s1600/chrsnap.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/_glrEiI4xsDc/Swl7rZwfF2I/AAAAAAAAA0E/95PzabxgC1E/s320/chrsnap.png" /></a><br /></div>It works fairly well and is quite <i>fast</i>, especially when starting up (unlike Firefox). Ports of both <a href="http://www.chromeextensions.org/appearance-functioning/adblock/">AdBlock Plus</a> and <a href="http://www.chromeextensions.org/appearance-functioning/adblock/">FlashBlock</a> are available for Chrome as extensions now, so you can drastically reduce the clutter on most web pages. Unfortunately they don't seem to work as well on Chrome as they do on Firefox. The web-sites for some Indian banks also don't work very well with Chrome, though they work quite well with Firefox - this seems more due to browser-identity-based behaviour modification on their part than due to some inherent flaw with Chrome.
<p>
I was quite fascinated by the detailed memory-usage statistics provided by the special "<tt>about:memory</tt>" URL in Chrome and how it managed to keep memory-usage in check during an extended browsing session. This is most likely due to its <a href="http://www.chromium.org/developers/design-documents/process-models">multiple-processes-based architecture</a>. It definitely scores over Firefox in this area, which suffers from <a href="http://blog.pavlov.net/2007/11/10/memory-fragmentation/">memory fragmentation</a> in a single process after several memory allocations and releases.
<p>
Poking around the Chrome installation package, we find that the base URL for the package repository is <tt>http://dl.google.com/linux/deb/</tt> - this being <a href="http://www.debian.org/doc/manuals/repository-howto/repository-howto.en.html">a standard Debian package repository</a>, the meta-data for updated packages can therefore be obtained from <a href="http://dl.google.com/linux/deb/dists/stable/main/binary-i386/Packages.gz">http://dl.google.com/linux/deb/dists/stable/main/binary-i386/Packages.gz</a>. Uncompress this file using <tt>gunzip</tt> and find the appropriate section for Chrome by looking for the line "<tt>Package: google-chrome-unstable</tt>" - the subsequent "<tt>Version:</tt>" line gives the latest available version of Chrome. If you wish to update your Chrome installation to this version, look for the subsequent "<tt>Filename:</tt>" line that provides the path to the installation package relative to the base URL of the package repository. For example, the URL of the package for the latest version of Chrome currently available is "<a href="http://dl.google.com/linux/deb/pool/main/g/google-chrome-unstable/google-chrome-unstable_4.0.249.4-r32475_i386.deb">http://dl.google.com/linux/deb/pool/main/g/google-chrome-unstable/google-chrome-unstable_4.0.249.4-r32475_i386.deb</a>".
<p>
Hopefully there will soon be more generic builds of the browser that can run on most Linux distributions and automatically update themselves (just like Firefox). The workarounds given above, though not too complicated, are somewhat cumbersome. They are however enough to get you started with Chrome on a Slackware Linux PC so that you can play around with it and get a feel for it.
<p>
Impressive as Chrome is, I'm not yet shifting to it and am sticking with Firefox for regular browsing. The Firefox extensions that I depend on either do not work properly in Chrome or are not available for it. All the web-sites that I care for work properly in Firefox, while some do not work well in Chrome. I use a lot of keyboard short-cuts in Firefox - some of these work in Chrome while others don't (e.g. Ctrl+Shift+Enter to convert "foo" to "http://www.foo.org/" in the location bar). I tweak Firefox a lot using "<tt>about:config</tt>", which seems to be missing in Chrome. While Firefox seems slower and more bloated than Chrome, I hope that some day it becomes as good as, or even better than, Chrome.
<p>
<b>Update (2009-11-23):</b> I hadn't noticed it earlier, but Slacky seems to provide ready-made builds of Chrome for Slackware. For example, <a href="http://repository.slacky.eu/slackware-12.2/network/google-chrome/">for 12.2</a> and <a href="http://repository.slacky.eu/slackware-13.0/network/google-chrome/">for 13.0</a> (but not for 12.1).
<p>
<b>Update (2009-12-02):</b> Follow the <a href="http://googlechromereleases.blogspot.com/">Google Chrome Releases blog</a> to know about the latest Chrome releases, including those in the developer channel.
<p>
I use a small shell script called "<a href="http://cid-65b7c3a02dd61662.skydrive.live.com/self.aspx/.Public/chkchrome.sh">chkchrome.sh</a>" to download and extract such releases using the method described in this post. I also have a small TAR archive that stores the symbolic links and overriding shared libraries needed to run Chrome and keep it in "<tt>$HOME/tmp/chrome-libs.tar.bz2</tt>" - the <tt>chkchrome.sh</tt> script automatically extracts this archive into the installation folder so that Chrome is ready to use once the script finishes executing successfully.
<p>
(<a href="http://rmathew.blogspot.com/2009/11/google-chrome-on-slackware.html">Originally posted on Blogspot</a>.)
m4_end_post_rest
m4_end_post
