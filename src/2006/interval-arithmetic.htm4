m4_define(`m4_post_date', `2006-02-21')m4_dnl
m4_define(`m4_post_title', `Interval Arithmetic')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
<a href="http://lambda-the-ultimate.org/node/1301">Via LtU</a>, I became interested in <a href="http://www.cs.utep.edu/interval-comp/">interval arithmetic</a> once again. I had first looked at this alternative method while struggling with errors in numeric computations in my <a href="http://rmathew.com/philez/index.html#vtaj">Virtual Taj</a> demo. If you have never heard of interval arithmetic, I recommend reading Brian Hayes's article "<a href="http://www.cs.utep.edu/interval-comp/hayes.pdf">A Lucid Interval</a>" (PDF, 84KB) first published in American Scientist and <a href="http://research.sun.com/minds/2004-0527/">an interview with Bill Walster</a> of Sun Microsystems. Essentially, interval arithmetic lets you keep track of the margins of error in your data and provides you an estimate of the probability of the correctness of the results of your computations with this data.  The main problem is not only that interval arithmetic is at least twice as slow as ordinary computer arithmetic, but also that the margins of error keep increasing over successive computations. Of course, this margin of error is anyway there in your computations whether you use interval arithmetic or not - at least now you have your "<a href="http://politicalhumor.about.com/cs/quotethis/a/rumsfeldquotes.htm">known unknowns</a>" - but we humans normally do not like to face it. There are other problems too, including the difficulty of division when an interval contains the number 0, the non-distributive nature of computations, the necessity to anyway deal with floating-point precision and rounding errors when the endpoints of intervals are expressed as floating-point numbers, etc.   Despite all these problems, interval arithmetic might still be our best bet in attempting to perform meaningful computations on computers. Interestingly, Knuth also expresses a similar view in <a href="http://www-cs-faculty.stanford.edu/~knuth/taocp.html">TAOCP</a> Volume II ("Seminumerical Algorithms"), but sadly does not expand much on this topic.   If you're intrigued by such things, you might also want to check out <a href="http://en.wikipedia.org/wiki/Affine_arithmetic">affine arithmetic</a> and <a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">arbitrary-precision arithmetic</a>. 
<p>
(<a href="http://www.advogato.org/person/rmathew/diary/147.html">Originally posted on Advogato</a>.)
m4_end_post
