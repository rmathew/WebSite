m4_define(`m4_post_date', `2006-03-23')m4_dnl
m4_define(`m4_post_title', `Assembly Language')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
<a href="http://www.advogato.org/person/saju/diary.html?start=0">saju's first post</a> made me recall some of the things I miss in C which were so simple in x86 assembly language. For example, while doing <a href="http://en.wikipedia.org/wiki/Fixed-point_arithmetic">fixed-point arithmetic</a> with 32-bit operands, it was immensely useful that the CPU could hold the result of a multiplication (using <a href="http://pdos.csail.mit.edu/6.828/2005/readings/i386/MUL.htm">MUL</a>) in the EDX:EAX 64-bit register combination without overflow and that the <i>same</i> register combination could be used in a following division (using <a href="http://pdos.csail.mit.edu/6.828/2005/readings/i386/DIV.htm">DIV</a>), neatly separating the quotient and the remainder. The <a href="http://pdos.csail.mit.edu/6.828/2005/readings/i386/ADC.htm">ADC</a> ("Add with Carry") instruction was similarly useful for neatly handling overflows in addition. I don't know if you can achieve this in C without resorting to inline assembly. Readers of <a href="http://en.wikipedia.org/wiki/Michael_Abrash">Michael Abrash</a>'s "<a href="http://www.jagregory.com/abrash-black-book/">Graphics Programming Black Book</a>" and <a href="http://www.oldskool.org/">Oldskool</a> PC coders will immediately realise what I'm talking about. 
<p>
(<a href="http://www.advogato.org/person/rmathew/diary/154.html">Originally posted on Advogato</a>.)
m4_end_post
