m4_define(`m4_post_date', `2007-01-20')m4_dnl
m4_define(`m4_post_title', `Local Variables in Java')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
The other day I was reviewing some Java code written by a colleague. I noticed that he was in the habit of declaring all the variables used by a method at the beginning of the method body rather than in the places where they were first used. I pointed out that declaring a variable only when it is first required makes the code more readable.
<p>
While he agreed to change the style of his code, he was still reluctant to move the declaration of a variable used only within a loop from outside it to inside it. For example, he was reluctant to change:<br /><pre><br />    String s;<br />    for( int i = 0; i < 10; i++)<br />    {<br />      s = String.valueOf( i);<br />    }<br /></pre><br />to:<br /><pre><br />    for( int i = 0; i < 10; i++)<br />    {<br />      String s = String.valueOf( i);<br />    }<br /></pre><br />He believed that only one variable is created in the former case while 10 variables are created in the latter - clearly it is more efficient to declare a single variable outside the loop and keep reusing it inside the loop!
<p>
I then pointed out <a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/Overview.doc.html#15722">the section in the JVM specification that says that a JVM uses a fixed-size array for storing the values of local variables used in a method</a> and each local variable maps to an index in this array. A Java compiler calculates the size of this array during the compilation of a method and declares it in the generated bytecode for the method.
<p>
Since he was still sceptical, I compiled both the variants to bytecode, used <code>javap -c</code> to produce the dissassembled code and used <code>diff</code> to show that the generated code was the same in both the cases (except for the indices used for <code>s</code> and <code>i</code>). I then used a simple modification of using <a href="http://www.artima.com/insidejvm/applets/index.html">the JVM Emulator Applet written by Bill Venners</a> as a standalone application to show the bytecode variants in execution and demonstrate that the size of the local variables array really remains constant throughout.<br /><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;" src="http://2.bp.blogspot.com/_glrEiI4xsDc/RbHm6DkCxbI/AAAAAAAAAAM/-tMTC0HmxBo/s400/jvmemu.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5022048944558097842" /><br />He was finally convinced.
<p>
On the other extreme, I have another colleague who is in the masochistic habit of introducing new scopes to isolate the local variables used only in a section of a method's body. That is, something like:<br /><pre><br />  {<br />    Foo x = wombat.snafu( );<br />    // Use x here.<br />    ...<br />  }<br />  {<br />    Bar y = new Bar( a, b, c);<br />    // Use y here.<br />    ...<br />  }<br /></pre>
<p>
(<a href="http://rmathew.blogspot.com/2007/01/local-variables-in-java.html">Originally posted on Blogspot</a>.)
m4_end_post
