m4_define(`m4_post_date', `2007-07-25')m4_dnl
m4_define(`m4_post_title', `ICFPC 2007')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
I spent most of this weekend taking part in the <a href="http://www.icfpcontest.org/">ICFP contest</a> for 2007. As in 2005, I took part in the contest with <a href="http://www.yumpee.org/">Yumpee</a> as my team-mate. Our team was called "Kalianpur Bakaits" (an <a href="http://www.iitk.ac.in/">IIT-K</a> reference) in the beginning, but we changed it to "The Great Indian Rope Trick" later, for reasons that should become obvious in a while.
m4_begin_post_rest
<p>
This year's task was very similar to <a href="http://boundvariable.org/">that from last year</a>, but it was a bit tougher and even more fun. The organisers surely must have spent a lot of time and effort in putting together the task description and the supporting materials. There were no mistakes discovered in the task description for this year's contest (unlike those for the previous years' contests). The mailing list also had an unusually low-traffic during the contest - perhaps it was because the task description was precise enough, perhaps it was because a lot of people were finding it difficult just to get started or perhaps the contest was affected by the release of the latest Harry Potter book during the same weekend.
<p>
This year's task was to save an alien named "Endo". Endo was a "Fuun" travelling in a spaceship named "Arrow", when it had a mishap with an "interstellar garbage collector" that picked it and then dumped it on Earth. This caused critical damage to both Endo and Arrow. Our job was to repair Endo's DNA in such a way that Arrow is able to restore it to its former condition using its limited remaining power.
<p>
Endo's DNA is a long sequence comprising four bases, 'I', 'C', 'F' and 'P'. This sequence can be interpreted to create an RNA sequence comprising the same four bases that in turn can be used to build the proteins necessary to restore Endo. Prefixes comprising the four bases can be attached to a DNA sequence to modify its behaviour - we had to find a cheap and low-risk prefix that Arrow could process to repair Endo's DNA.
<p>
This translates to creating an interpreter for the DNA sequence that produces an RNA sequence, creating another interpreter for this RNA sequence that creates an image out of it and finally discovering a prefix that could restore Endo. The organisers provided us the DNA sequence for Endo, a "source" image resulting from interpreting this DNA sequence and a "target" image representing a fully-restored Endo. We were asked to create a DNA prefix that results in an image that is as close to the target image as possible, while being as short and as cheap to process as possible.
<p>
The task description was detailed enough for us to readily build a DNA to RNA converter as well as an RNA to image converter. The challenge was to do the processing quickly enough since the given DNA sequence required about 2 million iterations over a string that was about 7.5MB long. I created the DNA-to-RNA converter, while Yumpee built the RNA-to-image converter.
<p>
Since we had to splice and join huge lists while interpreting the DNA, I started off with a C implementation that used Lisp-style "<a href="http://en.wikipedia.org/wiki/Cons">cons</a>" cells. While it seemed to perform well (but not good enough for the task), it had hard to track bugs that caused segmentation faults, not to mention memory leaks. I then tried using Java for creating the interpreter, which resulted in a correct but even slower interpreter. By this time, I had wasted two out of the three days allotted for the task. We had not made much progress while a lot of teams seemed to have discovered the same "magical" prefix comprising 28 bases that had boosted their rankings.
<p>
This is when I finally decided to act on Yumpee's suggestion of looking into using "<a href="http://en.wikipedia.org/wiki/Rope_(computer_science)">ropes</a>" as the underlying data structure. He had been suggesting it repeatedly since the time he had seen the task description, but I kept putting it off since I was not familiar with it. I decided to check out the "<a href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/gc_source/cordh.txt">cords</a>" implementation of ropes that comes with <a href="http://www.hpl.hp.com/personal/Hans_Boehm/gc/">Boehm-GC</a>. I modified my original interpreter in C to use cords instead of my home-grown and buggy cons-cells implementation.
<p>
The difference in performance was startling! The very first implementation ran through all the 2 million iterations in about 10 minutes on my PC and in about 4 minutes on Yumpee's PC. The code had also become much simpler to read and much closer to the pseudo-code provided in the task description. I debugged it a little to remove a bug that resulted from a misreading of the specification and then handed it over to Yumpee. By this time, he had a working RNA-to-image converter (he was also busy barking up the wrong trees till that time) and had also discovered the magic 28-base prefix. Unfortunately for us, we had just nine hours left to finish the task.
<p>
We discovered that the fun had just started. Embedded in the DNA were a series of clues that formed a virtual treasure-hunt, involving encrypted pages, EBCDIC-encoded text, fractals, callable functions, etc. We discovered a lot of clues but we couldn't find a prefix in time that would improve our rankings. It felt good that we could make so much progress by the end of the contest, unlike the last time. However, I felt like an idiot for not having listened to Yumpee earlier and saving myself and our team a lot of wasted time.
<p>
As I always end up saying after such contests, I hope we have a better luck the next time.
<p>
Some more reports: <a href="http://wiki.freaks-unidos.net/icfp/2007/">1</a>, <a href="http://blogs.msdn.com/cashto/archive/2007/07/23/the-icfp-10th-annual-programming-contest.aspx">2</a>, <a href="http://existentialtype.net/?p=156">3</a>,  <a href="http://jfkbits.blogspot.com/2007/07/not-programming-for-icfp-2007.html">4</a>, <a href="http://community.livejournal.com/evan_tech/229595.html">5</a>, <a href="http://marco-za.blogspot.com/2007/07/icfp-how-we-reached-top-15.html">6</a>, <a href="http://stereotype441.livejournal.com/45150.html">7</a>, <a href="http://vikipedia.wordpress.com/2007/07/23/icfp-with-haskellpython-ocaml/">8</a>, <a href="http://sambangu.blogspot.com/2007/07/python-to-rescue-icfp-contest-2007">9</a>, <a href="http://jsnell.iki.fi/blog/archive/2007-07-25icfp-2007.html">10</a>, etc.
<p>
<b>Update (2007-07-26):</b> I tweaked the code for the DNA-to-RNA converter a little bit to avoid creating a lot of unnecessary cords and that reduced its running time to about 1 minute 35 seconds on my PC (about 7 times better than before) and about 30 seconds on Yumpee's PC. Right now the garbage collector itself is the biggest consumer of CPU cycles (about 45% on the whole), but disabling it leads to the programme quickly running out of memory on my PC.
<p>
(<a href="http://rmathew.blogspot.com/2007/07/icfpc-2007.html">Originally posted on Blogspot</a>.)
m4_end_post_rest
m4_end_post
