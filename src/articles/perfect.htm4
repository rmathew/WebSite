m4_define(`m4_root_dir',`..')m4_dnl
m4_define(`m4_page_title',`Perfection Denied')m4_dnl
m4_define(`m4_page_section',``Articles'')m4_dnl
m4_dnl
m4_include(`header.htm4')m4_dnl
m4_dnl
m4_toc
m4_heading( `1', `intro', `Introduction')
<p>
This article is my attempt to collect and list interesting
&ldquo;proofs&rdquo; that demonstrate why certain types of
&ldquo;perfect&rdquo; software tools are impossible to create.
<p>
I plan to add more when I can recollect them or if I come across
more such demonstrations.
<p>
For each of the tools, I first define what is meant by a
perfect such tool and then demonstrate why it is not possible
to create it. Wherever possible, I have tried to give credit
to the author or forum where I first came across the proof.
m4_heading( `1', `antivirus', `Perfect Antivirus')
<p>
<b>Definition:</b> A perfect antivirus would be a program that can
reliably detect all computer virii and can remove them from
infected programs - or can at least quarantine infected programs.
<p>
<b>Notes:</b> We will show that it is not possible in the first
place to write a program that can detect all computer virii with
100% accuracy. I came across this proof in a book by Fred Cohen,
the pioneer researcher on computer virii.
<p>
<b>Proof:</b> Let us suppose that there indeed exists a program
that can tell us with 100% accuracy whether a given program is
a virus or not. It is easy to see that we can write this program
as a procedure (or write a wrapper procedure around the program)
that returns <tt>true</tt> if a given program is a virus, <tt>false</tt>
otherwise. Let us name this procedure <tt>isVirus( )</tt>.
<p>
Now we can write a program that uses this procedure <i>on itself</i>
in the following manner:
<div class="notice">
<pre>
if( isVirus( self))
{
/* Behave like a normal program */
}
else
{
/* Behave like a virus */
}
</pre>
</div>
<p>
It can easily be seen that our program always behaves exactly opposite
to what the virus detector says is its behaviour. So the virus
detector is <i>always wrong</i> about our program and is not 100%
accurate after all!
<p>
Thus there can never be a program that can always correctly determine
if a given program is a virus or not.
m4_heading( `1', `compressor', `Perfect Compressor')
<p>
<b>Definition:</b> A perfect compressor would be a program that can
always compress any given data file to a file with a smaller size,
such that a corresponding decompressor will always be able to
decompress the compressed file to exactly the same data that was
present in the original file <i>without using any extra information</i>.
<p>
<b>Notes:</b> We will use the &ldquo;pigeon hole&rdquo; principle to
demonstrate the impossibility of such a tool. I do not know who
came up with this proof first, but it is seen frequently on the
<tt>comp.compression</tt> newsgroup.
<p>
<b>Proof:</b> A compressor will have to compress a given
sequence of <tt>n</tt> bytes to a sequence of <i>at most</i>
<tt>(n-1)</tt> bytes to be called a &ldquo;compressor&rdquo; and
will have to always do it for <i>any</i> such sequence to be
even considered for being called &ldquo;perfect&rdquo;.
<p>
Let us suppose that such a tool exists.
<p>
Now each byte can store 256 different values, so there are
256<sup>n</sup> possible input sequences of <tt>n</tt> bytes. In
other words, there are
<p>
<div class="centred">
256<sup>n</sup> +
256<sup>(n-1)</sup> +
256<sup>(n-2)</sup> +
... +
256<sup>1</sup>
</div>
<p>
possible non-empty input sequences of <tt>n</tt> bytes or less for
our compressor.
<p>
Since the compressor can output sequences of only <tt>(n-1)</tt>
bytes or less, it can only output
<p>
<div class="centred">
256<sup>(n-1)</sup> +
256<sup>(n-2)</sup> +
... +
256<sup>1</sup>
</div>
<p>
possible non-empty sequences of bytes of compressed data.
<p>
Clearly there just isn't enough room to fit the compressed output
of the possible set of input data - we have more pigeons than we have
pigeon holes to put them in.
<p>
In other words, it is just not possible to build a perfect compressor
as defined here.
<p>
Note that we didn't even have to consider the additional restriction
that <tt>n</tt>, <tt>(n-1)</tt>, etc. bytes have to be respectively
compressed to <tt>(n-1)</tt>, <tt>(n-2)</tt>, etc. or less bytes.
m4_dnl
m4_include(`footer.htm4')m4_dnl
