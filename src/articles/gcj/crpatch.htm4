m4_define(`m4_root_dir',`../..')m4_dnl
m4_define(`m4_page_title',`Creating Patches')m4_dnl
m4_define(`m4_page_section',``Articles'')m4_dnl
m4_dnl
m4_include(`header.htm4')m4_dnl
m4_dnl
m4_toc
m4_heading( `1', `intro', `Introduction')
<p>
This document describes the process I use to create and
submit patches to the <a href="http://gcc.gnu.org/java/">GNU Compiler for Java
(GCJ)</a> and the <a href="http://gcc.gnu.org/">GNU Compiler Collection
(GCC)</a>. I hope this proves useful to the people who ask &ldquo;How do I
submit a patch?&rdquo; on the GCJ/GCC mailing lists.
<div class="notice">
<p>
<b>NOTE:</b> This is <i>not</i> the &ldquo;proper&rdquo; or
&ldquo;official&rdquo; way of creating and submitting
patches - that process has been <a
href="http://gcc.gnu.org/svnwrite.html">explained in detail elsewhere</a>.
That process requires one to use <a
href="http://subversion.tigris.org/">Subversion</a> (SVN).
<p>
The process described here is meant for &ldquo;one-off hackers&rdquo;
or people who cannot use SVN for some reason or the other.
</div>
<p>
I am fairly sure that the same process would apply
equally well to other <a href="http://www.gnu.org/">GNU</a>
software projects and quite possibly to other Free
software projects.
m4_heading( `1', `reqs', `Requirements')
<p>
I assume Linux as the development environment - this process also
applies to systems that have all the standard UNIX utilities
as well as Larry Wall's &ldquo;<tt>patch</tt>&rdquo; program.
The &ldquo;<tt>diff</tt>&rdquo; program used here is the
GNU <tt>diff</tt> utility. On Windows, <a
href="http://sources.redhat.com/cygwin/">Cygwin</a> and
<a href="http://www.mingw.org/msys.shtml">MinGW MSYS</a>
satisfy these conditions.
<p>
I use a couple of scripts as wrappers around these commands.
These are the <a href="getdiff.sh"><tt>getdiff.sh</tt></a>
script that generates the patch for a single modified file and the
<a href="makepatch.sh"><tt>makepatch.sh</tt></a> script
that uses the <tt>getdiff.sh</tt> script to create a patch
out of multiple modified files. I recommend that you download
and put these scripts in your <tt>PATH</tt> if you wish to
avoid having to type tedious command lines every time you create
a patch or want review your changes.
<p>
Alexandre Oliva has created a few scripts (imaginatively named
&ldquo;CVS Utils&rdquo;) that are very useful in submitting
(and accepting) patches. In particular, I highly recommend that
you get &ldquo;<tt>clcleanup</tt>&rdquo; and the &ldquo;<tt>fixpatch</tt>&rdquo;
script that it uses and put them in your <tt>PATH</tt>. You can get
these scripts <a
href="http://savannah.gnu.org/cgi-bin/viewcvs/cvs-utils/cvs-utils/">here</a>.
m4_heading( `1', `before', `Before You Start')
<p>
In order to help you understand this process more clearly,
let us assume that you wish to change the files
&ldquo;<tt>libjava/foo/bar/Snafu.java</tt>&rdquo;
and &ldquo;<tt>libjava/wombat.cc</tt>&rdquo; within the GCC sources
as a part of your proposed patch.
<p>
The very first thing you need to do before you start modifying
the sources is to ensure that the source tree is as up to date
as is possible for you. For example, you can download the
latest GCC snapshot and update your source tree with it.
<p>
The next thing you need to do is to back up the files you intend
to modify in their respective folders but with a &ldquo;<tt>.orig</tt>&rdquo;
suffix. In our example, after you back up, you should have
&ldquo;<tt>libjava/foo/bar/Snafu.java.orig</tt>&rdquo; and
&ldquo;<tt>libjava/wombat.cc.orig</tt>&rdquo; apart from the original
files and identical to them. This step is <b>very important</b>!
m4_heading( `1', `modsrcs', `Modifying the Sources')
<p>
Now go ahead and make the changes you intended to make. You will
of course have to adhere to the coding standards in effect
for that module and/or the programming language. The GNU Coding Standards are
pretty detailed and apply strictly to GCC. GCJ has its own <a
href="http://gcc.gnu.org/java/contrib.html">addendum</a> for Java source files.
<p>
An important thing to note here is that you should use a code
editor that does not act too smart with TABs and spaces. You
could otherwise end up ruining the formatting of the source code
you are modifying.
m4_heading( `1', `testing', `Testing Your Changes')
<p>
After this you should do a clean bootstrap build and run the
testsuite and any additional tests that you want to run to make
sure that your patch really fixes the problem. There should be
<i>no regressions</i> as a result of your patch.
<p>
Ignore this at your own peril - you really do not want hordes
of angry developers with bared fangs crying for your blood if your
patch somehow gets accepted and committed to the tree and
causes regressions (or worse, <i>build failures</i>).
<p>
Once you are satisfied with your changes and have confidence
in them, it is time to create a patch that you can submit
to the maintainers of the project.
m4_heading( `1', `chlog', `Writing a ChangeLog Entry')
<p>
You begin by describing your changes in the
&ldquo;<tt>ChangeLog</tt>&rdquo; for the affected module.
<p>
All modules in almost all the major Free software projects
maintain &ldquo;change logs&rdquo; that describe the changes
that have been made till date to the source tree. These
logs comprise entries that have the date on which the change
was made/committed, the name of the author of the change, the
email address where he/she can be contacted, followed by lines
that describe the actual changes. By convention, the active
change log is kept in a file named &ldquo;<tt>ChangeLog</tt>&rdquo;
in the main folder of a module and the entries are maintained
in a reverse chronological order (latest changes first).
<p>
You will need to find the appropriate <tt>ChangeLog</tt> file
and add an entry describing your changes. To find this file,
look for it in the folder containing the modified source
file, if it is not found, in the parent folder of the folder, and
so on. In our example, this file can be found in the
&ldquo;<tt>libjava</tt>&rdquo; folder. <i>Before you add your entry</i>,
back up the original file with a &ldquo;<tt>.orig</tt>&rdquo; extension
as before. So you should now have the file
&ldquo;<tt>libjava/ChangeLog.orig</tt>&rdquo; that is identical to
the original file.
<p>
Take a look at the other <tt>ChangeLog</tt> entries to see how
to write one. For our example, the relevant <tt>ChangeLog</tt>
entry could look like this:
<div class="notice">
<pre>
2003-07-14  Ranjit Mathew  &lt;rmathew@example.com&gt;
* foo/bar/Snafu.java (getGrok): Use native method
for computing grok.
* wombat.cc (getGrok): New method for computing grok
using get_grok().
</pre>
</div>
<p>
The <tt>ChangeLog</tt> entry header is a line of the format:
<div class="centred">
<tt>YYYY-MM-DD</tt>&nbsp;
<i><small>two-spaces</small></i>&nbsp;
<tt>Your Name</tt>&nbsp;
<i><small>two-spaces</small></i>&nbsp;
<tt>&lt;your@email.address&gt;</tt>
</div>
<p>
The lines following the header describe the affected files
and the methods/functions within them that were affected
by your change. Note that each such line is preceded by a
real TAB character and <i>not</i> an &ldquo;equivalent&rdquo;
number of spaces. For GNU projects, you can find all you
need to know about writing <tt>ChangeLog</tt> entries
<a href="http://www.gnu.org/prep/standards/">here</a>.
<p>
If your patch fixes a reported GCC/GCJ bug, be sure to
have a line like &ldquo;<tt>Fixes PR c++/7910</tt>&rdquo;
as the first line in the <tt>ChangeLog</tt> entry
description.
m4_heading( `1', `create', `Creating the Patch')
<p>
Now you are all set to create the patch. Execute the
<a href="makepatch.sh"><tt>makepatch.sh</tt></a> script
in the root folder of the module, filter its output
through the <tt>clcleanup</tt> script and redirect the
final output to a text file.
<p>
In other words, for our example, simply execute the following
in the &ldquo;<tt>libjava</tt>&rdquo; folder within the GCC
source tree:
<div class="centred">
<tt>$ makepatch.sh . | clcleanup &gt; /tmp/mypatch.txt</tt>
</div>
<p>
If you examine &ldquo;<tt>/tmp/mypatch.txt</tt>&rdquo;, it might
look something like the following:
<div class="notice">
<pre>
Index: ChangeLog
from  Ranjit Mathew  &lt;rmathew@example.com&gt;
* foo/bar/Snafu.java (getGrok): Use native method
for computing grok.
* wombat.cc (getGrok): New method for computing grok
using get_grok().
Index: foo/bar/Snafu.java
===================================================================
--- foo/bar/Snafu.java	Mon Jul 14 07:49:50 2003
+++ foo/bar/Snafu.java	Mon Jul 14 07:50:48 2003
@@ -1,4 +1,6 @@
}
+    public native int getGrok ();
+
public String toString ()
{
Index: wombat.cc
===================================================================
--- wombat.cc	Mon Jul 14 07:54:02 2003
+++ wombat.cc	Mon Jul 14 07:53:34 2003
@@ -1,4 +1,9 @@
}
+    int foo::bar::getGrok (void)
+    {
+      return get_grok ();
+    }
+
get_name (void)
{
</pre>
</div>
<p>
Notice that <tt>clcleanup</tt> script has removed the date from
your <tt>ChangeLog</tt> entry so that the when the maintainer
finally applies your patch, the final <tt>ChangeLog</tt> entry
will automagically have the correct date.
<p>
Note that the <tt>ChangeLog</tt> entry must come first in the
patch. Most of the times the command given above works just
fine in this respect. Just in case it does not, you can
arrange to consolidate the individual file changes obtained
using the <a href="getdiff.sh"><tt>getdiff.sh</tt></a> script
manually in the desired order. This is left as an exercise for
the reader.
m4_heading( `1', `submit', `Submitting the Patch')
<p>
You can now send your patch to the appropriate mailing list. For
GCC in general, patches should be sent to <tt>gcc-patches@gcc.gnu.org</tt>.
For GCJ in particular, patches should be sent to
<tt>java-patches@gcc.gnu.org</tt>.
<p>
Your mail should describe the problem that your patch is trying
to solve in detail. Alternatively you can also point to the
appropriate bug report or the thread on a mailing list where
the issue was discussed, etc.
<p>
Do not send HTML mail! Use only plain-text to send the mail.
You should also be aware of any issues that your mail client
might have in sending text mail as is without modification.
This might make your patch difficult to apply cleanly and
might even irritate the maintainers, who after all have
volunteered to work on such projects in their free time.
For example, Mozilla Messenger supports sending
<a href="http://www.joeclark.org/ffaq.html">&ldquo;Format=Flowed&rdquo;</a>
mails and <a
href="http://gcc.gnu.org/ml/java-patches/2003-q2/msg00315.html">introduces an
extra space in lines that start with a space</a> (such lines are very common
in <tt>diff</tt> outputs). Sometimes it is safer to send the patch as
an attachment instead of sending it inline.
<p>
If there are objections to your patch or if people suggest
a better way of achieving the same thing, you might have to
repeat the process until your patch is accepted.
<p>
If you do not get a response to your patch in a &ldquo;reasonable&rdquo;
amount of time (say, a week), you can send a &ldquo;ping&rdquo;
message to the patches mailing list requesting people to
take a look at it.
m4_dnl
m4_include(`footer.htm4')m4_dnl
