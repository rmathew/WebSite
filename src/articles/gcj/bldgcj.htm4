m4_define(`m4_root_dir',`../..')m4_dnl
m4_define(`m4_page_title',`Building GCJ for Windows')m4_dnl
m4_define(`m4_page_section',``Articles'')m4_dnl
m4_dnl
m4_include(`header.htm4')m4_dnl
m4_dnl
m4_toc
m4_heading( `1', `intro', `Introduction')
<p>
This document describes the process that I used to build the <a
href="http://gcc.gnu.org/java/">GNU Compiler for Java (GCJ)</a> for Windows
using the <a href="http://www.mingw.org/">Minimalist GNU for Windows
(MinGW)</a> toolkit. I had written this document to avoid having to
individually answer frequent queries on this process as well as to encourage
people to experiment with creating GCJ for Windows customised to their liking.
<div class="notice">
<b>DISCLAIMER:</b> These instructions and scripts were valid for building GCJ
4.2 for Windows. I do not know if they continue to be valid for newer releases
of GCJ since I have not built GCJ for Windows after GCJ 4.2.
</div>
<p>
The most obvious way to go about doing this would be to build GCJ on Windows
using either <a href="http://www.mingw.org/msys.shtml">MSYS</a> or <a
href="http://sources.redhat.com/cygwin/">Cygwin</a>. This is known as a
&ldquo;native&rdquo; build. This is indeed how I first went about it. However,
it was painfully <i>slow</i>. It was also rather unreliable due to various
bugs in MSYS and due to the case-insensitivity of the Windows filesystems.
<p>
This is where the awesome design of the <a href="http://gcc.gnu.org/">GNU
Compiler Collection (GCC)</a>, of which GCJ is a part, came to my aid - I was
actually able to use the following two-step process instead of the above:
<ol>
<li>
Build a GCJ on Linux that runs on Linux but creates executables for Windows
(known as a &ldquo;cross-compiler&rdquo;).
</li>
<li>
Using the GCJ created above, build a GCJ on Linux that runs on Windows and
creates executables for Windows (known as a &ldquo;crossed-native
compiler&rdquo;).
</li>
</ol>
<p>
This two-step process is actually <i>far faster</i> than the single-step
native build process and is also very reliable. I can also test the compiler
created like this on Linux itself using either <a
href="http://www.winehq.com/">WINE</a> or Windows itself running inside an
emulator like QEMU, thus completely avoiding the need to reboot my PC.
<p>
It should come as no surprise then, that this is the process I used to build
and test GCJ for Windows and this process is what is documented below.
<p>
If you have any comments on this document, or if you have any
queries that are not answered by it, please feel free to contact me.
m4_heading( `1', `reqs', `Requirements')
<p>
The first thing you need is a decent PC running a modern Linux distribution.
You would need around 500 MB of free hard disc space for the whole process.
You should know how to work under Linux and you should have had some
experience in building software from source. Your Linux installation should
also have the &ldquo;development&rdquo; packages like GCC, binutils, make,
bison, flex, etc.
<p>
You would need to download the source code for <a
href="http://gcc.gnu.org/">GCC</a> and <a
href="http://sources.redhat.com/binutils/">binutils</a>. I recommend that you
get the latest released version of these from a convenient mirror site. If
bandwidth is a constraint for you, get only the &ldquo;core&rdquo;,
&ldquo;g++&rdquo; and &ldquo;java&rdquo; bundles (compressed tarballs) of GCC.
<p>
I will use $TARGET to refer to the target of the code generated by
GCC. This can be either &ldquo;mingw32&rdquo;, &ldquo;i386-pc-mingw32&rdquo;
or &ldquo;i686-pc-mingw32&rdquo; (without the double quotes) depending on
your needs. &ldquo;mingw32&rdquo; is the canonical MinGW target and
is an alias for &ldquo;i386-pc-mingw32&rdquo; at the time of this writing.
This represents 32-bit Windows executables that can run on any PC with
an i386 or better. If you only want to target Pentium Pro or better (all
modern PCs), use &ldquo;i686-pc-mingw32&rdquo; instead.
<p>
I will use $GCC_SRC_DIR and $BU_SRC_DIR to refer to the folders
into which you have extracted the source code for GCC and binutils
respectively.
<p>
Download the latest released versions of the &ldquo;mingw-runtime&rdquo; and
&ldquo;w32api&rdquo; binary packages from <a
href="http://sourceforge.net/projects/mingw/">the MinGW
SourceForge repository</a>.
<p>
We will use the following shell scripts to automate the build process:
<ol>
<li>
<a href="cfgxbu.sh">cfgxbu.sh</a> - configure Linux to Windows cross-binutils.
</li>
<li>
<a href="cfgxgcc.sh">cfgxgcc.sh</a> - configure Linux to Windows cross-GCC.
</li>
<li>
<a href="cfgwbu.sh">cfgwbu.sh</a> - configure Windows cross-native-binutils.
</li>
<li>
<a href="cfgwgcc.sh">cfgwgcc.sh</a> - configure Windows crossed-native-GCC.
</li>
<li>
<a href="buildit.sh">buildit.sh</a> - build configured software.
</li>
</ol>
<p>
Download and save these scripts into a convenient folder and be sure
to give &ldquo;execute&rdquo; permission on them.
<p>
<b>IMPORTANT:</b> At the top of each of these scripts are variables
that you <i>must</i> set correctly to reflect your folder structure. These
include the folders where you have extracted the binutils and GCC sources
and the folders where the built software would be installed. If you do not
do this, the process would most likely fail for you.
<p>
Finally, you must have some patience and perseverance as the entire process
can take quite a while.
m4_heading( `1', `notes', `Important Notes')
<p>
Here are some important notes for this process:
<ol>
<li>
You must get the <i>binaries</i> for &ldquo;mingw-runtime&rdquo; and
&ldquo;w32api&rdquo;, not the source packages.
</li>
<li>
The folders where you build GCC or binutils and the folder into
which you finally install them must be totally separate from the
folders that contain their respective sources. GCC does not yet properly
support building it in the same folder as (or a sub-folder of) the folder
that contains its sources. This holds for both the phases of this process.
</li>
<li>
Before you start building GCC or binutils (in either phase), you should
create a sub-folder named &ldquo;<tt>sys-root</tt>&rdquo; inside the folder into
which you would install the GCC and binutils that you would be building.
Create a sub-folder named &ldquo;<tt>mingw</tt>&rdquo; inside the
&ldquo;<tt>sys-root</tt>&rdquo; folder and then extract the contents of the
&ldquo;mingw-runtime&rdquo; and &ldquo;w32api&rdquo; binary packages as-is into
this folder such that the &ldquo;<tt>include</tt>&rdquo; and
&ldquo;<tt>lib</tt>&rdquo; sub-folders of this folder (i.e.
&ldquo;<tt>sys-root/mingw</tt>&rdquo;) contain the MinGW headers and libraries
respectively.
</li>
<li>
After you build and install cross-binutils in the first phase, you must
modify your <tt>PATH</tt> environment variable to contain <i>before anything
else</i> the path to the &ldquo;<tt>bin</tt>&rdquo; sub-folder of the folder
into which you have installed it. If you use the scripts I have provided here,
you do not need to do this manually.
</li>
<li>
I have used the target &ldquo;i686-pc-mingw32&rdquo; in the scripts. If you
wish to use a different target (e.g. &ldquo;i386-pc-mingw32&rdquo;),
you must change the value of the &ldquo;TARGET&rdquo; variable in each of the
scripts before proceeding with this process.
</li>
<li>
At least as of binutils-2.16.1, you must build cross and crossed-native
binutils on a file-system that supports creating hard links. GCC does not
have such a problem.
</li>
<li>
You must have installed YACC and Lex (or equivalent programmes like GNU bison
and flex) to build binutils.
</li>
</ol>
m4_heading( `1', `xgcc', `Building a Cross-Compiler')
<p>
We will first need to build a GCC that runs on Linux, but creates executables
for Windows. This is sufficient in itself if you prefer Linux to Windows as
a development environment.
<p>
Follow the following steps in the given order:
<ol>
<li>
Create a folder <i>outside of either $BU_SRC_DIR or $GCC_SRC_DIR</i>
where we will install the cross-compiler. We will call this folder $XGCC_DIR.
</li>
<li>
Create a folder named &ldquo;<tt>sys-root</tt>&rdquo; in $XGCC_DIR. Create a
folder named &ldquo;<tt>mingw</tt>&rdquo; within the
&ldquo;<tt>sys-root</tt>&rdquo; folder. Extract the &ldquo;mingw-runtime&rdquo;
and &ldquo;w32api&rdquo; binary packages as-is into this sub-folder (i.e.
&ldquo;$XGCC_DIR/sys-root/mingw&rdquo;).
</li>
<li>
Create a folder <i>outside of either $BU_SRC_DIR or $GCC_SRC_DIR</i>
where we will build cross-binutils. We will call this folder $XBU_BUILD_DIR.
</li>
<li>
Update the &ldquo;cfgxbu.sh&rdquo; script with the correct value for
BU_SRC_DIR and set PREFIX to the value of $XGCC_DIR.
</li>
<li>
Run &ldquo;cfgxbu.sh&rdquo; with $XBU_BUILD_DIR as the working folder.
</li>
<li>
Update the &ldquo;buildit.sh&rdquo; script with the correct value for
XGCC_DIR.
</li>
<li>
Run &ldquo;buildit.sh&rdquo; with $XBU_BUILD_DIR as the working folder. This
will build and install cross-binutils into $XGCC_DIR.
</li>
<li>
Create a folder <i>outside of either $BU_SRC_DIR or $GCC_SRC_DIR</i>
where we will build cross-GCC. We will call this folder $XGCC_BUILD_DIR.
If you want to save space, you can clean up $XBU_BUILD_DIR and use it here.
</li>
<li>
Update the &ldquo;cfgxgcc.sh&rdquo; script with the correct value for
GCC_SRC_DIR and set PREFIX to the value of $XGCC_DIR.
</li>
<li>
Run &ldquo;cfgxgcc.sh&rdquo; with $XGCC_BUILD_DIR as the working folder.
</li>
<li>
Run &ldquo;buildit.sh&rdquo; with $XGCC_BUILD_DIR as the working folder. This
will build and install cross-GCC into $XGCC_DIR.
</li>
</ol>
<p>
If everything went smoothly, you now have a complete cross-compiler running on
Linux that can generate Windows executables from programmes written in C, C++
or Java. The compiler executables will be named $TARGET-gcc, $TARGET-g++, etc.
and can be found in $XGCC_DIR/bin.
m4_heading( `1', `wgcc', `Building a Crossed-Native Compiler')
<p>
We will now use the cross-GCC built above to create a native GCC for Windows.
This is needed if you prefer to compile and test Windows programmes on Windows
itself.
<p>
Follow the following steps in the given order:
<ol>
<li>
Create a folder <i>outside of either $BU_SRC_DIR or $GCC_SRC_DIR</i>
where we will install the crossed-native GCC. We will call this folder
$WGCC_DIR.
</li>
<li>
Create a folder named &ldquo;<tt>sys-root</tt>&rdquo; in $WGCC_DIR. Create a
folder named &ldquo;<tt>mingw</tt>&rdquo; within the
&ldquo;<tt>sys-root</tt>&rdquo; folder. Extract the &ldquo;mingw-runtime&rdquo;
and &ldquo;w32api&rdquo; binary packages as-is into this sub-folder (i.e.
&ldquo;$WGCC_DIR/sys-root/mingw&rdquo;).
</li>
<li>
Create a folder <i>outside of either $BU_SRC_DIR or $GCC_SRC_DIR</i>
where we will build crossed-native-binutils. We will call this folder
$WBU_BUILD_DIR. If you want to save space, you can clean up $XGCC_BUILD_DIR
and use it here.
</li>
<li>
Update the &ldquo;cfgwbu.sh&rdquo; script with the correct values for
BU_SRC_DIR and XGCC_DIR. Set PREFIX to the value of $WGCC_DIR.
</li>
<li>
Run &ldquo;cfgwbu.sh&rdquo; with $WBU_BUILD_DIR as the working folder.
</li>
<li>
Update the &ldquo;buildit.sh&rdquo; script with the correct value for XGCC_DIR.
</li>
<li>
Run &ldquo;buildit.sh&rdquo; with $WBU_BUILD_DIR as the working folder. This
will build and install crossed-native-binutils into $WGCC_DIR.
</li>
<li>
Create a folder <i>outside of either $BU_SRC_DIR or $GCC_SRC_DIR</i>
where we will build GCC for Windows. We will call this folder $WGCC_BUILD_DIR.
If you want to save space, you can clean up $WBU_BUILD_DIR and use it here.
</li>
<li>
Update the &ldquo;cfgwgcc.sh&rdquo; script with the correct values for
GCC_SRC_DIR and XGCC_DIR. Set PREFIX to the value of $WGCC_DIR.
</li>
<li>
Run &ldquo;cfgwgcc.sh&rdquo; with $WGCC_BUILD_DIR as the working folder.
</li>
<li>
Run &ldquo;buildit.sh&rdquo; with $WGCC_BUILD_DIR as the working folder. This
will build and install GCC into $WGCC_DIR.
</li>
</ol>
<p>
If everything went smoothly, you now have a crossed-native GCC for Windows
that can compile C, C++ and Java programmes into executables for Windows.
Transfer the contents of $WGCC_DIR to a Windows machine to use it.
<div class="notice">
<b>WARNING:</b> When you install binutils into $WGCC_DIR, the tools are
installed into both $WGCC_DIR/bin as well as $WGCC_DIR/$TARGET/bin. To
save space, these are created as hard links. When you transfer the contents
of $WGCC_DIR to a Windows machine, make sure that the $WGCC_DIR/$TARGET/bin
folder exists and has the necessary tools from binutils. If you do not do
this, GCC will not be able to automatically locate these tools unless their
location is specified in the PATH environment variable.
</div>
m4_heading( `1', `ngcc', `Building a Native Compiler')
<p>
While I have built the C and C++ compilers in GCC natively for MinGW using
MSYS, I have not tried building GCJ natively in this environment in a long
time for the reasons mentioned elsewhere. However, there are some things you
should definitely bear in mind while building GCC natively for MinGW using
MSYS:
<ul>
<li>
You should have a working MinGW installation. Note that MSYS maps the root of
the MinGW installation folder to the path &ldquo;<tt>/mingw</tt>&rdquo;.
</li>
<li>
You <i>must</i> configure GCC using a relative path instead of using absolute
paths (i.e. use something like &ldquo;<tt>../gcc/configure</tt>&rdquo; instead
of something like &ldquo;<tt>/d/src/gcc/configure</tt>&rdquo; or
&ldquo;<tt>e:/gcc/configure</tt>&rdquo;).
</li>
<li>
You should use &ldquo;<tt>/mingw</tt>&rdquo; as the configured prefix (i.e. use
&ldquo;<tt>--prefix=/mingw</tt>&rdquo;) if you want the installed toolchain to
be relocatable. You can install it elsewhere after building it by using
something like &ldquo;<tt>make DESTDIR=/foo/bar install</tt>&rdquo; (the
compiler will be installed within the &ldquo;<tt>mingw</tt>&rdquo; sub-folder of
&ldquo;<tt>/foo/bar</tt>&rdquo;).
</li>
<li>
You have to use &ldquo;<tt>--disable-werror</tt>&rdquo; for the configuration in
order to prevent a build failure due to warnings being treated as errors.
</li>
<li>
You should use &ldquo;<tt>make bootstrap</tt>&rdquo; to build the compiler.
</li>
<li>
If you are using GCC sources from the SVN mainline, instead of the sources
from the official releases, you will need the GNU Bison parser generator and
the Flex lexical analyser generator. You can get pre-built binaries of these
programmes for MinGW from <a href="http://gnuwin32.sourceforge.net/">the
GNU-Win32 project</a>. Note that you must restart the MSYS environment if you
install these programmes while it is running.
</li>
</ul>
m4_heading( `1', `further', `Further Reading')
<p>
Now you can start using GCJ to build and run your applications. If you run
into any problems, feel free to ask the GCJ mailing list for help by sending
a message to <a href="mailto:java@gcc.gnu.org">java@gcc.gnu.org</a> giving as
many details as possible. However, you should first read the <a
href="http://gcc.gnu.org/java/docs.html">GCJ documentation</a> and search the
<a href="http://gcc.gnu.org/ml/java/">GCJ mailing list</a> to find out if your
issue has already been addressed.
<p>
Since GCC/GCJ is Free Software and you have the complete source code
available for it, you might sometimes find that you can fix a problem
yourself by patching it. In this case, do share your fix with other
users by sending your patch to <a
href="mailto:java-patches@gcc.gnu.org">java-patches@gcc.gnu.org</a>. If you
are new to this, read &ldquo;<a href="crpatch.html">How to Create
Patches</a>&rdquo; for information on how to create and submit a patch.
m4_heading( `1', `changes', `Change History')
<p>
Here are the summaries of the major changes made to this document
since it was first published:
<ul>
<li>
<b>2008-01-15:</b> Add a disclaimer that these steps have not been validated
for GCJ releases after 4.2.
</li>
<li>
<b>2006-07-27:</b> Mention that GCC, binutils, make, etc. is needed on
the build machine.
</li>
<li>
<b>2006-07-01:</b> Warn about hard links created by binutils's installation.
</li>
<li>
<b>2006-06-09:</b> Updated the scripts and the instructions for the latest
GCC sources.
</li>
<li>
<b>2005-07-20:</b> Simplified the document a bit; highlighted
important points to note in &ldquo;Important Notes&rdquo;. Thanks
to Barry Andrews for his help and encouragement.
</li>
<li>
<b>2005-07-15:</b> Put in a disclaimer note that I have not worked
on GCJ for Win32 since mid-2003 and that I still think the document
is useful.
</li>
</ul>
m4_dnl
m4_include(`footer.htm4')m4_dnl
