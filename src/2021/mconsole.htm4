m4_define(`m4_post_date', `2021-11-09')m4_dnl
m4_define(`m4_post_title', `Making console8x16 Work With mrxvt')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
<a href="https://en.wikipedia.org/wiki/Mrxvt">mrxvt</a> is my favorite
terminal-emulator to use on <a href="m4_root_dir/2020/lucifer.html">Lucifer</a>
because it is <em>fast</em> and supports multiple tabs. I like to pair it with
the bitmapped font <code>console8x16</code> from <a
href="https://en.wikipedia.org/wiki/Konsole">Konsole</a> because that font looks
good in my opinion while giving me the nostalgia kick of using <a
href="https://int10h.org/oldschool-pc-fonts/">an OldSkool PC font</a>.
Unfortunately, the two do not work well together when it comes to displaying <a
href="https://en.wikipedia.org/wiki/Box-drawing_character#Unix,_CP/M,_BBS">box-drawing
characters</a>. Until now.

m4_begin_post_rest
<p>
mrxvt is quite fast &ndash; try repeatedly executing something like <code>time
cat /usr/man/man1/xterm.1</code> in mrxvt (after warming up the file-cache) and
then some other terminal, especially when paired with a bitmapped font. It
does not depend on heavy GUI-toolkits like Gtk+ or Qt and only uses X for
rendering content. On old hardware like Lucifer, it provides a snappy UX
compared to other terminal-emulators and that is why I prefer it.  Sadly it has
not been actively developed for many years and lacks some features like proper
UTF-8 support, which is a deal-breaker for many folks (though not for me).
<p>
I really like the glyphs on <code>console8x16</code> and it is my favorite
bitmapped font to use on older hardware with lower display-resolution. Lars
Doelle, the creator of Konsole, used the old VGA 8x16 PC font as a base (the
same as that used by the Linux VGA console or the Linux Framebuffer with the
VGA8x16 font) and then extended it beyond code-point 255 to support various
characters. It was used in Konsole till at least KDE 3.5.10. Sadly it has become
quite hard to find these days as most people have moved on from bitmapped fonts,
so I preserved my copy of the source of the font <a
href="https://github.com/rmathew/Misc/blob/master/gfx/console8x16.bdf">here</a>.
Recently however, I was once again able to find a copy of the source preserved
in the Git-repository of the <a href="http://trinitydesktop.org/">Trinity
Desktop Environment</a> (KDE 3.5 lives!) <a
href="https://git.trinitydesktop.org/cgit/tdebase/tree/konsole/fonts/console8x16.bdf">here</a>.
I was also able to find a copy in the source-archives for <a
href="https://download.kde.org/Attic/3.5.10/src/kdebase-3.5.10.tar.bz2">kdebase-3.5.10</a>
as the file <code>kdebase-3.5.10/konsole/fonts/console8x16.bdf</code>. (All
these copies of the file should have an MD5-checksum of
<code>b961b8a1f45973c637a36542db632b29</code>.)
<p>
While <code>console8x16</code> does provide the box-drawing characters and both
Konsole and xterm are able to correctly render them while using
<code>console8x16</code> as a font, mrxvt is not. The reason is that when asked
to switch to the <a
href="https://en.wikipedia.org/wiki/DEC_Special_Graphics">VT100 Alternate
Character Set</a> (ACS) by an application via the escape-sequence <code>ESC (
0</code> in order to render the box-drawing characters, mrxvt simply tries to
load the glyph at code-point <code>&lt;ascii-code&gt; - 0x5f</code>, which is
normally reserved for various control-characters. Since <code>console8x16</code>
does not provide glpyhs for these code-points, mrxvt is not able to render lines
and the display gets messed up. (xterm uses a more sophisticated
fallback-mechanism in such cases in order to correctly render lines.)
<p>
Here is a small shell-script that lets you check the glyphs from ACS as rendered
by your terminal-emulator:
<pre><code>m4_dnl
#!/usr/bin/env bash
# Check the rendering of box-drawing characters on a terminal:
#   https://en.wikipedia.org/wiki/Box-drawing_character#Unix,_CP/M,_BBS
for n in $(seq 95 126); do
&nbsp; x=$(printf "%x" $n)
&nbsp; y=$(expr $n - 95)
&nbsp; printf "%03d (0x$x) -> %02d (0x%02x): \x$x -> \x1b(0\x$x\x1b(B\n" $n $y $y
done
</code></pre>
<p>
Since <a
href="https://en.wikipedia.org/wiki/Glyph_Bitmap_Distribution_Format">BDF</a> is
a text-based file-format, I was able to edit the source for
<code>console8x16</code> to insert the right glyphs at the code-points expected
by mrxvt, so that the latter could correctly render the box-drawing characters.
You can find the source for the updated font <a
href="https://github.com/rmathew/Misc/blob/master/gfx/mconsole8x16.bdf">here</a>.
You can compile it to a format that can be used by X by running:
<pre><code>m4_dnl
bdftopcf -t -o mconsole.pcf mconsole8x16.bdf && \
&nbsp; gzip --best mconsole.pcf
</code></pre>
<p>
Copy it over to a directory that is in the font-path of your X server (do not
forget to run <code>mkfontdir</code> on the directory after copying over the
font).
<p>
By the way, there used to be a nifty BDF-editor application called
&ldquo;XmBDFEditor&rdquo; that seems to be no longer available. Fortunately, I
was able to snag <a
href="https://web.archive.org/web/20070203224716if_/http://crl.nmsu.edu:80/~mleisher/xmbdfed-4.7.tar.bz2">a copy via the Web Archive</a>.
The sources need to be patched up a bit before they can be compiled on a modern
Linux desktop. Once you have that, you can use it explore a BDF font, modify it,
create your own glyphs or fonts, etc. If you simply want to see the glyphs
provided by a font, use the standard <code>xfd</code> utility instead.
<p>
Now that mrxvt can properly render (a patched) <code>console8x16</code>, I am
happily using the dynamic duo on Lucifer.

m4_end_post_rest
m4_end_post
