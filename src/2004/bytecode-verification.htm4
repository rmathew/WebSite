m4_define(`m4_post_date', `2004-07-15')m4_dnl
m4_define(`m4_post_title', `Bytecode Verification')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
I was able to track down and fix <a href="http://gcc.gnu.org/bugzilla/show_bug.cgi?id=5537">PR 5537</a> with a simple patch, but fixing it exposed other problems in the front end bytecode verifier that cause failures in the libjava testsuite and in the Mauve verifier testsuite.  So now I need to go after <i>these</i> bugs before I can submit a patch. <i>~sigh~</i> (Why do such things always happen to <i>me</i>?)  I found <a href="http://www.ida.liu.se/~pelab/inrise/RISE01/bracha-verifier-linkoping.pdf">an interesting presentation</a> (PDF) by <a href="http://bracha.org/">Gilad Bracha</a> (a "Computational Theologist" in Sun) on bytecode verification. I found it interesting because he says that Sun went with load-time bytecode verification to reduce run-time verification overheads and had to introduce strict <a href="http://java.sun.com/docs/books/jls/second_edition/html/defAssign.doc.html">definite (un)assignment</a> as a mandatory feature of the language to be able to carry out proper type inference during verification! The other interesting bit was that they went with type inference (instead of type checking) to reduce the space used by class files at the cost of increased complexity, memory usage and speed - they later found out that type checking would have meant faster and simpler code at the cost of only a little extra space (5-10%)!  "<a href="http://www.cookcomputing.com/blog/archives/000084.html">Premature optimisation is the root of all evil!</a>"  By the way, JDK 1.5 will have <a href="http://java.sun.com/j2se/1.5.0/docs/guide/vm/class-data-sharing.html">class data sharing</a> to reduce startup times. So should libgcj use <a href="http://www.crast.us/james/articles/prelink.php">prelinking</a>? 
<p>
(<a href="https://www.advogato.org/person/rmathew/diary/32.html">Originally posted on Advogato</a>.)
m4_end_post
