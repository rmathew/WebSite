m4_define(`m4_post_date', `2004-07-05')m4_dnl
m4_define(`m4_post_title', `C++')m4_dnl
m4_include(`posttrans.m4')m4_dnl
m4_begin_post
<p>
Nathan Sidwell is on the laudable mission of introducing <a href="http://people.redhat.com/lockhart/.gcc04/Reprint-Sidwell-GCC2004.pdf">statically typed trees</a> to GCC replacing the much abused and overloaded "tree" structure. Some people were of the opinion that it might be much better to just write a front end in C++ or at least a reduced subset of C++ ("C with classes"?). Some though were a bit apprehensive of the idea, saying that once you let in a bit of C++, there will really be nothing stopping developers from bringing in all of C++ and then you'd find yourself in a nightmare of trying to support all those C++ compilers on all supported platforms that differ sometimes subtly, sometimes not quite so in their interpretation of the language standards.  Tom has rewritten <a href="http://sourceforge.net/projects/gcjx/">the GCJ front end in C++</a> and has done awesomely well and quite a lot in such a short period of time.  Looks like there's no escaping it now...  But...  I have never been able to bring myself to like this language. There is no one thing that I can point to nor can I write detailed and knowledgeable analyses like <a href="http://burks.brighton.ac.uk/burks/pcinfo/progdocs/cppcrit/index.htm">this</a> or <a href="http://www.planetfall.pwp.blueyonder.co.uk/notcpp.html">this</a>, though I do agree completely with a lot of points raised in these.  Perhaps it is because of the boring and overly complex book on the language by Stroustrup that happened to be my first introduction to C++ (in a sharp contrast to that masterpiece of brevity, accessibility and utility that was written by Kernighan and Ritchie). Perhaps it is because of the mind-scarring error messages spewed by the versions of the IBM xlC compiler on AIX containing literally two to three lines of mangled names of instantiations of templates. Perhaps it is because of the fact that GCC is so <i>slow</i> compiling programs using the STL. Perhaps it is because I found that as a programmer I had to know so many things about the nuances of the language just to be able to program anything with a semblence of confidence.  I really like object-oriented programming, but I find Java to be way better and much simpler in expressing myself than C++. I would not at all mind if GCC were to be rewritten in Java, though I'm not at all a Java fanboy.  I just want a natively compiled, simple programming language without many "gotchas", that lets me easily express decent object-oriented designs and that comes with a standard and fairly comprehensive runtime library. Perhaps I should take a dekko at Objective C.  (See? This is what happens when Advogato comes back up online after a long time.)
<p>
(<a href="http://www.advogato.org/person/rmathew/diary/29.html">Originally posted on Advogato</a>.)
m4_end_post
